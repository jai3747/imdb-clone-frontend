name: Frontend Security & Build Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
  GH_PAT: ${{ secrets.GH_PAT }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  APP_DOMAIN: ${{ secrets.APP_DOMAIN }}

jobs:
  parallel-security-scans:
    name: 🔒 Security Scans
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scan: [trufflehog, semgrep, snyk, checkov, zap, nuclei]
      fail-fast: false
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # SAST - TruffleHog
      - name: TruffleHog Scan
        if: matrix.scan == 'trufflehog'
        continue-on-error: true
        id: trufflehog
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: ${{ github.event.before }}
          head: ${{ github.sha }}
          extra_args: --debug --only-verified
          
      - name: Generate TruffleHog Report
        if: matrix.scan == 'trufflehog'
        run: |
          echo "# 🔍 Secret Scanning Report" > trufflehog-report.md
          echo "## Summary Dashboard" >> trufflehog-report.md
          echo "| Category | Status | Count |" >> trufflehog-report.md
          echo "|----------|--------|-------|" >> trufflehog-report.md
          echo "| High Risk Secrets | ❌ | $(grep -c "high" trufflehog-results.json || echo 0) |" >> trufflehog-report.md
          echo "| Medium Risk | ⚠️ | $(grep -c "medium" trufflehog-results.json || echo 0) |" >> trufflehog-report.md
          echo "### Scan Status: ${{ steps.trufflehog.outcome }}" >> trufflehog-report.md

      # SAST - Semgrep
      - name: Semgrep Scan
        if: matrix.scan == 'semgrep'
        continue-on-error: true
        id: semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/javascript
            p/react
            p/security-audit
            p/typescript
            p/owasp-top-ten
          generateSarif: "1"
          output: semgrep-results.sarif

      - name: Generate Semgrep Report
        if: matrix.scan == 'semgrep'
        run: |
          echo "# 🛡️ Static Code Analysis Report" > semgrep-report.md
          echo "## Risk Dashboard" >> semgrep-report.md
          echo "| Severity | Count | Status |" >> semgrep-report.md
          echo "|----------|--------|--------|" >> semgrep-report.md
          jq -r '.runs[].results[] | .level' semgrep-results.sarif | sort | uniq -c | \
          while read -r count level; do
            if [ "$level" = "error" ]; then
              echo "| Critical | $count | ❌ |" >> semgrep-report.md
            elif [ "$level" = "warning" ]; then
              echo "| Warning | $count | ⚠️ |" >> semgrep-report.md
            fi
          done
          echo "### Scan Status: ${{ steps.semgrep.outcome }}" >> semgrep-report.md

      # SCA - Snyk
      - name: Snyk Scan
        if: matrix.scan == 'snyk'
        continue-on-error: true
        id: snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-results.json

      - name: Generate Snyk Report
        if: matrix.scan == 'snyk'
        run: |
          echo "# 🔒 Dependency Security Report" > snyk-report.md
          echo "## Vulnerability Dashboard" >> snyk-report.md
          echo "| Severity | Count | Status |" >> snyk-report.md
          echo "|----------|--------|--------|" >> snyk-report.md
          jq -r '.vulnerabilities | group_by(.severity)[] | {severity: .[0].severity, count: length}' snyk-results.json | \
          while read -r severity count; do
            if [ "$severity" = "critical" ]; then
              echo "| Critical | $count | ❌ |" >> snyk-report.md
            elif [ "$severity" = "high" ]; then
              echo "| High | $count | ⚠️ |" >> snyk-report.md
            fi
          done
          echo "### Scan Status: ${{ steps.snyk.outcome }}" >> snyk-report.md

      # IaC - Checkov
      - name: Checkov Scan
        if: matrix.scan == 'checkov'
        continue-on-error: true
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,secrets
          output_format: cli,sarif
          output_file_path: console,checkov-results.sarif
          soft_fail: true

      - name: Generate Checkov Report
        if: matrix.scan == 'checkov'
        run: |
          echo "# 🏗️ Infrastructure Security Report" > checkov-report.md
          echo "## Configuration Risk Dashboard" >> checkov-report.md
          echo "| Category | Failed Checks | Status |" >> checkov-report.md
          echo "|----------|---------------|--------|" >> checkov-report.md
          jq -r '.runs[].results[] | .ruleId' checkov-results.sarif | cut -d'/' -f1 | sort | uniq -c | \
          while read -r count category; do
            echo "| $category | $count | ⚠️ |" >> checkov-report.md
          done
          echo "### Scan Status: ${{ steps.checkov.outcome }}" >> checkov-report.md

      # DAST Scans
      - name: Health Check for DAST
        if: matrix.scan == 'zap' || matrix.scan == 'nuclei'
        continue-on-error: true
        id: healthcheck
        run: |
          timeout=300
          start_time=$(date +%s)
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -gt $timeout ]; then
              echo "Timeout waiting for deployment"
              exit 1
            fi
            if curl -s -f "${{ env.APP_DOMAIN }}/health" >/dev/null; then
              echo "Service is up!"
              break
            fi
            echo "Waiting for service to be available..."
            sleep 10
          done

      - name: ZAP Scan
        if: matrix.scan == 'zap' && steps.healthcheck.outcome == 'success'
        continue-on-error: true
        id: zap
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: ${{ env.APP_DOMAIN }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -I'
          allow_issue_writing: true
          fail_action: false

      - name: Generate ZAP Report
        if: matrix.scan == 'zap'
        run: |
          echo "# 🕷️ ZAP Security Test Report" > zap-report.md
          echo "## Vulnerability Dashboard" >> zap-report.md
          echo "| Risk Level | Count | Status |" >> zap-report.md
          echo "|------------|--------|--------|" >> zap-report.md
          if [ -f zap-baseline-report.json ]; then
            jq -r '.site[].alerts | group_by(.risk) | .[] | {risk: .[0].risk, count: length}' zap-baseline-report.json | \
            while read -r risk count; do
              case "$risk" in
                "High")
                  echo "| High | $count | ❌ |" >> zap-report.md
                  ;;
                "Medium")
                  echo "| Medium | $count | ⚠️ |" >> zap-report.md
                  ;;
                "Low")
                  echo "| Low | $count | ℹ️ |" >> zap-report.md
                  ;;
              esac
            done
          fi
          echo "### Scan Status: ${{ steps.zap.outcome }}" >> zap-report.md

      - name: Nuclei Scan
        if: matrix.scan == 'nuclei' && steps.healthcheck.outcome == 'success'
        continue-on-error: true
        id: nuclei
        uses: projectdiscovery/nuclei-action@main
        with:
          target: ${{ env.APP_DOMAIN }}
          templates: "cves,vulnerabilities,exposures,misconfiguration"
          severity: "critical,high,medium"
          output: "nuclei-results.json"
          json: true
          rate-limit: 150
          bulk-size: 25

      - name: Generate Nuclei Report
        if: matrix.scan == 'nuclei'
        run: |
          echo "# 🎯 Nuclei Vulnerability Report" > nuclei-report.md
          echo "## Security Dashboard" >> nuclei-report.md
          echo "| Severity | Count | Status |" >> nuclei-report.md
          echo "|----------|--------|--------|" >> nuclei-report.md
          if [ -f nuclei-results.json ]; then
            jq -r '.[] | .info.severity' nuclei-results.json | sort | uniq -c | \
            while read -r count severity; do
              case "$severity" in
                "critical")
                  echo "| Critical | $count | ❌ |" >> nuclei-report.md
                  ;;
                "high")
                  echo "| High | $count | ⚠️ |" >> nuclei-report.md
                  ;;
                "medium")
                  echo "| Medium | $count | ℹ️ |" >> nuclei-report.md
                  ;;
              esac
            done
          fi
          echo "### Scan Status: ${{ steps.nuclei.outcome }}" >> nuclei-report.md

      # Upload Individual Reports as Artifacts
      - name: Upload Scan Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.scan }}-report
          path: ${{ matrix.scan }}-report.md
          if-no-files-found: ignore

  # Build and Push Docker Image
  build-docker:
    needs: parallel-security-scans
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.sha }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
          cache-to: type=inline

  # Container Security Scan
  container-scan:
    needs: [build-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Trivy Vulnerability Scan
        continue-on-error: true
        id: trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ needs.build-docker.outputs.image_tag }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Generate Trivy Report
        run: |
          echo "# 🐳 Container Security Report" > trivy-report.md
          echo "## Vulnerability Dashboard" >> trivy-report.md
          echo "| Severity | Count | Status |" >> trivy-report.md
          echo "|----------|--------|--------|" >> trivy-report.md
          jq -r '.runs[].results[] | .level' trivy-results.sarif | sort | uniq -c | \
          while read -r count level; do
            case "$level" in
              "error")
                echo "| Critical | $count | ❌ |" >> trivy-report.md
                ;;
              "warning")
                echo "| High | $count | ⚠️ |" >> trivy-report.md
                ;;
            esac
          done
          echo "### Scan Status: ${{ steps.trivy.outcome }}" >> trivy-report.md

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: trivy-report.md

  # Final Report Generation
  generate-final-report:
    needs: [parallel-security-scans, container-scan]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download All Reports
        uses: actions/download-artifact@v3

      - name: Consolidate Reports
        run: |
          echo "# 📊 Comprehensive Security Assessment Report" > final-report.md
          echo "## Executive Summary" >> final-report.md
          echo "### Overall Pipeline Status" >> final-report.md
          echo "| Security Category | Critical | High | Medium | Status |" >> final-report.md
          echo "|-------------------|----------|------|--------|--------|" >> final-report.md
          
          # Add individual reports
          for report in */*-report.md; do
            echo "---" >> final-report.md
            cat "$report" >> final-report.md
          done
          
          # Add timestamp
          echo "---" >> final-report.md
          echo "Report generated at: $(date)" >> final-report.md

      - name: Upload Final Report
        uses: actions/upload-artifact@v3
        with:
          name: security-assessment-report
          path: final-report.md
