name: Docker Build and Push Pipeline

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  DOCKER_TAG: ${{ github.sha }}
  NODE_VERSION: '18'
  BUILD_VERSION: v${{ github.run_number }}  # Adds automatic version numbering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-build-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - component: frontend
            repo: jai3747/imdb-clone-frontend
          - component: backend
            repo: jai3747/imdb-clone-backend
      fail-fast: false
    
    steps:
      # Clean workspace first
      - name: Clean workspace
        run: |
          rm -rf workspace
          rm -rf /tmp/.buildx-cache
          rm -rf /tmp/.buildx-cache-new
          echo "Cleaned workspace and cache directories"

      - name: Create fresh workspace directory
        run: |
          mkdir -p workspace
          echo "Created fresh workspace directory"

      # Fresh checkout
      - name: Checkout Component Repository
        uses: actions/checkout@v4.1.1
        with:
          repository: ${{ matrix.repo }}
          path: workspace/${{ matrix.component }}
          fetch-depth: 0
          clean: true  # Ensures clean checkout
          token: ${{ secrets.REPO_TOKEN }}

      # Print build information
      - name: Print Build Info
        run: |
          echo "Building ${{ matrix.component }} version ${{ env.BUILD_VERSION }}"
          echo "Commit SHA: ${{ env.DOCKER_TAG }}"
          echo "Build directory contents:"
          ls -la workspace/${{ matrix.component }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Create new cache for this build
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.component }}-${{ github.sha }}-${{ github.run_number }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.component }}-

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./workspace/${{ matrix.component }}
          file: ./workspace/${{ matrix.component }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/imdb-clone-${{ matrix.component }}:${{ env.DOCKER_TAG }}
            ${{ secrets.DOCKERHUB_USERNAME }}/imdb-clone-${{ matrix.component }}:${{ env.BUILD_VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/imdb-clone-${{ matrix.component }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            BUILD_VERSION=${{ env.BUILD_VERSION }}

      # Clean up after build
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up build artifacts and cache..."
          rm -rf workspace
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
          echo "Cleanup completed"
